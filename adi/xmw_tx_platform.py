# Copyright (C) 2023 Analog Devices, Inc.
#
# SPDX short identifier: ADIBSD
# Copyright (C) 2023 Analog Devices, Inc.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#     - Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     - Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#     - Neither the name of Analog Devices, Inc. nor the names of its
#       contributors may be used to endorse or promote products derived
#       from this software without specific prior written permission.
#     - The use of this software may or may not infringe the patent rights
#       of one or more patent holders.  This license does not release you
#       from the requirement that you obtain separate licenses from these
#       patent holders to use this software.
#     - Use of the software either in source or binary form, must be run
#       on or directly connected to an Analog Devices Inc. component.
#
# THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.
#
# IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, INTELLECTUAL PROPERTY
# RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
# THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from adi.ad9081 import ad9081
from adi.adrf5020 import adrf5020
from adi.adrf5730 import adrf5730
from adi.context_manager import context_manager


class xmw_tx_platform(ad9081):
    """2-24 GHz XMW TX Platform
    parameters:
    uri: type=string
        Optional parameter for the URI of IIO context with XMW TX Platform.
    """

    _device_name = ""

    def __init__(self, uri="ip:analog.local"):

        context_manager.__init__(self, uri, self._device_name)

        # Find and initialize all devices in the XMW TX Platform
        self._tx_clock_chip = self._ctx.find_device("hmc7044")
        self._tx_bpf = self._ctx.find_device("admv8818")
        self._tx_fixed_pll = self._ctx.find_device("adf4371_fixed_PLL")
        self._tx_tunable_pll = self._ctx.find_device("adf4371_tunable_PLL")

        self._tx_switch = adrf5020(uri="ip:analog.local", dev_name="adrf5020_control")
        self._tx_dsa = adrf5730(uri="ip:analog.local", dev_name="adrf5730_control")

        # Default values for GPIO controlled Switch
        self._output_freq_range = 1
        self._output_freq_MHz = 4500

        # Default values for GPIO controlled Digital Signal Attenuator
        self._dsa_atten = 0

        # Default values for output Band Pass Filter
        self._bpf_center_freq = 4500
        self._bpf_bandwidth = 1000
        self._bpf_high_pass_freq = 4000
        self._bpf_low_pass_freq = 5000

        # Default values for Fixed and Tunable PLLs
        self._fixed_pll_freq_MHz = 18000
        self._tunable_pll_freq_MHz = 16000

        # PLL output is from RF32x but this script is setting/getting frequency on RF8x (factor of 4)
        # Also, the linux driver for the ADF4371 PLL requires frequency to be in Hz while this
        # script takes frequency in MHz (factor of 1000000)
        # Net conversion factor is 1000000/4 = 250000
        self._channel_conv_factor = 250000

        # This is the intermediate frequency generated by the DAC of the MxFE chip
        self._if_freq_MHz = 4500

    @property
    def output_freq_MHz(self):
        """output_freq_MHz: Get/Set the desired output frequency in order to select the appropriate conversion path and tune LO to the required frequency.
        Valid options are 2-24 GHz with 0.5 GHz step size.
        """
        return self._output_freq_MHz

    @output_freq_MHz.setter
    def output_freq_MHz(self, value):
        print(
            f"Setting appropriate frequency conversion path and Tunable LO frequency for an RF out of {value} MHz."
        )
        self._output_freq_MHz = value
        if self._output_freq_MHz <= 7000:
            self.output_freq_range = 1
            self.tunable_pll_freq_MHz = (
                self._fixed_pll_freq_MHz - self._output_freq_MHz + self._if_freq_MHz
            )
        elif self._output_freq_MHz > 7000:
            self.output_freq_range = 0
            self.tunable_pll_freq_MHz = self._output_freq_MHz + self._if_freq_MHz
        else:
            self.output_freq_range = 1
            self.tunable_pll_freq_MHz = (
                self._fixed_pll_freq_MHz - self._output_freq_MHz + self._if_freq_MHz
            )
        # Set center frequency of output Band Pass Filter to desired RF out frequency
        self.output_bpf_freq_MHz = value

    @property
    def output_freq_range(self):
        """ output_freq_range: Get/Set frequency output range.
        Valid options are 7.1-24 GHz ('0') or 2-7 GHz ('1').
        """
        self._output_freq_range = self._tx_switch.control_signal_value
        if self._output_freq_range == 0:
            print("Output frequency range is 7.1-24 GHz.")
        elif self._output_freq_range == 1:
            print("Output frequency range is 2-7 GHz.")
        return self._output_freq_range

    @output_freq_range.setter
    def output_freq_range(self, value):
        if value == 0:
            print("Selecting output frequency range of 7.1-24 GHz.")
            self._tx_switch.control_signal_value = value
        elif value == 1:
            print("Selecting output frequency range of 2-7 GHz.")
            self._tx_switch.control_signal_value = value
        else:
            print(
                "Please select a valid option for output frequency range (0 for 7.1-24 GHz or 1 for 2-7 GHz)."
            )

    @property
    def if_attenuation_decimal(self):
        """ if_attenuation_decimal: Get/Set Attenuation Decimal value for Intermediate Frequency input.
        Valid options are 0-63, corresponding to 0-31.5 dB.
        """
        self._dsa_atten = self._tx_dsa.GPIO_attenuation
        return self._dsa_atten

    @if_attenuation_decimal.setter
    def if_attenuation_decimal(self, value):
        print(
            f"Setting Attenuation Decimal of Intermediate Frequency stage to {value}."
        )
        self._tx_dsa.GPIO_attenuation = value

    @property
    def output_bpf_freq_MHz(self):
        """ output_bpf_freq_MHz: Get/Set the center frequency for output Band Pass Filter with a fixed bandwidth of 1000 MHz."""
        self._bpf_center_freq = self._get_iio_attr(
            "altvoltage0", "filter_band_pass_center_frequency", True, self._tx_bpf
        )
        print(
            f"Center frequency for output Band Pass Filter is {self._bpf_center_freq} MHz."
        )
        return self._bpf_center_freq

    @output_bpf_freq_MHz.setter
    def output_bpf_freq_MHz(self, value):
        print(
            f"Setting Center frequency of output Band Pass Filter to {value} MHz with a bandwidth of {self._bpf_bandwidth} MHz."
        )
        self._bpf_center_freq = value
        self._bpf_high_pass_freq = value - (self._bpf_bandwidth / 2)
        self._bpf_low_pass_freq = value + (self._bpf_bandwidth / 2)
        self._set_iio_attr(
            "altvoltage0",
            "filter_band_pass_center_frequency",
            True,
            self._bpf_center_freq,
            self._tx_bpf,
        )
        self._set_iio_attr(
            "altvoltage0",
            "filter_band_pass_bandwidth_3db_frequency",
            True,
            self._bpf_bandwidth,
            self._tx_bpf,
        )
        self._set_iio_attr(
            "altvoltage0",
            "filter_high_pass_3db_frequency",
            True,
            self._bpf_high_pass_freq,
            self._tx_bpf,
        )
        self._set_iio_attr(
            "altvoltage0",
            "filter_low_pass_3db_frequency",
            True,
            self._bpf_low_pass_freq,
            self._tx_bpf,
        )

    @property
    def fixed_pll_freq_MHz(self):
        """ fixed_pll_freq_MHz: Get/Set the LO frequency generated by the fixed PLL."""
        self._fixed_pll_freq_MHz = (
            self._get_iio_attr("altvoltage0", "frequency", True, self._tx_fixed_pll)
        ) / self._channel_conv_factor
        print(f"LO frequency generated by Fixed PLL is {self._fixed_pll_freq_MHz} MHz.")
        return self._fixed_pll_freq_MHz

    @fixed_pll_freq_MHz.setter
    def fixed_pll_freq_MHz(self, value):
        print(f"Setting LO frequency generated by Fixed PLL to {value} MHz.")
        self._fixed_pll_freq_MHz = value * self._channel_conv_factor
        self._set_iio_attr(
            "altvoltage0",
            "frequency",
            True,
            self._fixed_pll_freq_MHz,
            self._tx_fixed_pll,
        )

    @property
    def tunable_pll_freq_MHz(self):
        """ tunable_pll_freq_MHz: Get/Set the LO frequency generated by the Tunable PLL."""
        self._tunable_pll_freq_MHz = (
            self._get_iio_attr("altvoltage0", "frequency", True, self._tx_tunable_pll)
        ) / self._channel_conv_factor
        print(
            f"LO frequency generated by Tunable PLL is {self._tunable_pll_freq_MHz} MHz."
        )
        return self._tunable_pll_freq_MHz

    @tunable_pll_freq_MHz.setter
    def tunable_pll_freq_MHz(self, value):
        print(f"Setting LO frequency generated by Tunable PLL to {value} MHz.")
        self._tunable_pll_freq_MHz = value * self._channel_conv_factor
        self._set_iio_attr(
            "altvoltage0",
            "frequency",
            True,
            self._tunable_pll_freq_MHz,
            self._tx_tunable_pll,
        )
